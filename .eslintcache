[{"C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\index.tsx":"1","C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\reportWebVitals.ts":"2","C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\App.tsx":"3","C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\reducers\\index.tsx":"4","C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\components\\Login.tsx":"5","C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\components\\NotFound.tsx":"6","C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\components\\Home.tsx":"7","C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\service\\api.tsx":"8","C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\reducers\\products.tsx":"9","C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\components\\Catalogue .tsx":"10","C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\components\\Alerts.tsx":"11","C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\components\\MyOrders.tsx":"12","C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\components\\Navigation.tsx":"13","C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\models\\UserLogIn.tsx":"14","C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\models\\OrderItem.tsx":"15","C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\models\\IIndex.tsx":"16","C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\models\\Order.tsx":"17","C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\reducers\\orders.tsx":"18","C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\reducers\\update.tsx":"19","C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\components\\MyCart.tsx":"20"},{"size":793,"mtime":1611239424965,"results":"21","hashOfConfig":"22"},{"size":425,"mtime":499162500000,"results":"23","hashOfConfig":"22"},{"size":1299,"mtime":1611576485267,"results":"24","hashOfConfig":"22"},{"size":393,"mtime":1611307027821,"results":"25","hashOfConfig":"22"},{"size":3511,"mtime":1611576849114,"results":"26","hashOfConfig":"22"},{"size":1304,"mtime":1611256131351,"results":"27","hashOfConfig":"22"},{"size":3574,"mtime":1612894536528,"results":"28","hashOfConfig":"22"},{"size":4654,"mtime":1612893857939,"results":"29","hashOfConfig":"22"},{"size":781,"mtime":1611244341087,"results":"30","hashOfConfig":"22"},{"size":6276,"mtime":1611576396199,"results":"31","hashOfConfig":"22"},{"size":1346,"mtime":1611512615525,"results":"32","hashOfConfig":"22"},{"size":7089,"mtime":1612894531341,"results":"33","hashOfConfig":"22"},{"size":2785,"mtime":1611513441261,"results":"34","hashOfConfig":"22"},{"size":193,"mtime":1611229088028,"results":"35","hashOfConfig":"22"},{"size":281,"mtime":1611229088015,"results":"36","hashOfConfig":"22"},{"size":167,"mtime":1611515022810,"results":"37","hashOfConfig":"22"},{"size":440,"mtime":1611509062969,"results":"38","hashOfConfig":"22"},{"size":1866,"mtime":1612894502794,"results":"39","hashOfConfig":"22"},{"size":491,"mtime":1611509412199,"results":"40","hashOfConfig":"22"},{"size":11577,"mtime":1611576623997,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"dqnzvv",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"44"},"C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\index.tsx",[],["86","87"],"C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\reportWebVitals.ts",[],"C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\App.tsx",[],"C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\reducers\\index.tsx",[],"C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\components\\Login.tsx",[],"C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\components\\NotFound.tsx",[],"C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\components\\Home.tsx",["88"],"C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\service\\api.tsx",["89"],"import { createContext } from 'react';\r\nimport { Order } from '../models/Order';\r\nimport { OrderItem } from '../models/OrderItem';\r\nimport { Product } from '../models/Product';\r\nimport { UserLogIn } from '../models/UserLogIn';\r\n\r\nexport const baseUrl = 'http://localhost:3000';\r\n\r\n//TOKEN\r\nexport type IToken = {\r\n  token: string | null;\r\n  setToken: (value: string | null) => void;\r\n};\r\nconst TokenDefault: IToken = {\r\n  token: null,\r\n  setToken: () => null,\r\n};\r\n\r\nexport const TokenContext = createContext<IToken>(TokenDefault);\r\n\r\n//ORDER ITEM\r\nexport type IOrderItem = {\r\n  orderItem: OrderItem[] | null;\r\n  setOrderItem: (value: OrderItem[] | null) => void;\r\n};\r\nconst OrderItemDefault: IOrderItem = {\r\n  orderItem: null,\r\n  setOrderItem: () => null,\r\n};\r\n\r\n// export const OrderItemsContext = createContext<IOrderItem>(OrderItemDefault);\r\n\r\n//ORDER\r\nexport type IOrder = {\r\n  order: Order | null;\r\n  setOrder: (value: Order | null) => void;\r\n};\r\nconst OrderDefault: IOrder = {\r\n  order: null,\r\n  setOrder: () => null,\r\n};\r\n\r\nexport const OrderContext = createContext<IOrder>(OrderDefault);\r\n\r\n//PRODUCT\r\nexport type IProduct = {\r\n  products: Product[] | null;\r\n  setProducts: (value: Product[] | null) => void;\r\n};\r\nconst ProductDefault: IProduct = {\r\n  products: null,\r\n  setProducts: () => null,\r\n};\r\nexport const ProductContext = createContext<IProduct>(ProductDefault);\r\n\r\n//ORDER\r\nexport type IUpdateOrAdd = {\r\n  update: boolean;\r\n  setUpdate: (value: boolean) => void;\r\n};\r\nconst UpdateOrAddDefault: IUpdateOrAdd = {\r\n  update: false,\r\n  setUpdate: () => null,\r\n};\r\n\r\nexport const UpdateContext = createContext<IUpdateOrAdd>(UpdateOrAddDefault);\r\n\r\n//FUNCTIONS\r\nexport async function LogInUser(email: string, pass: string): Promise<any> {\r\n  try {\r\n    let user = new UserLogIn(email, pass);\r\n    let response = await fetch(baseUrl + '/user/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify(user),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Accept: '*/*',\r\n        'Accept-Encoding': 'gzip, deflate, br',\r\n      },\r\n    });\r\n    return await response.json();\r\n  } catch (err) {\r\n    console.log('Error, ', err);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function GetAllProducts(): Promise<Product[] | null> {\r\n  try {\r\n    const value = await localStorage.getItem('token');\r\n    if (value !== null) {\r\n      const res = await fetch(baseUrl + '/product', {\r\n        method: 'GET',\r\n        headers: new Headers({\r\n          'auth-token': value,\r\n        }),\r\n      });\r\n      return await res.json();\r\n    }\r\n    return null;\r\n  } catch (err) {\r\n    console.log(err);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function AddOrder(\r\n  order: Order\r\n): Promise<{ order: string } | null> {\r\n  try {\r\n    const value = await localStorage.getItem('token');\r\n    console.log('Order', order);\r\n    const res = await fetch(baseUrl + '/orders', {\r\n      method: 'POST',\r\n      body: JSON.stringify(order),\r\n      headers: new Headers({\r\n        'Content-Type': 'application/json',\r\n        'auth-token': value!,\r\n      }),\r\n    });\r\n\r\n    var newOrder = await res.json();\r\n  } catch (err) {\r\n    console.log(err);\r\n    return null;\r\n  }\r\n  return newOrder;\r\n}\r\n\r\nexport async function UpdateOrder(order: Order): Promise<Order | null> {\r\n  try {\r\n    console.log(order);\r\n    const value = await localStorage.getItem('token');\r\n    const res = await fetch(baseUrl + '/orders', {\r\n      method: 'PUT',\r\n      body: JSON.stringify(order),\r\n      headers: new Headers({\r\n        'Content-Type': 'application/json',\r\n        'auth-token': value!,\r\n      }),\r\n    });\r\n\r\n    var newOrder = await res.json();\r\n  } catch (err) {\r\n    console.log(err);\r\n    return null;\r\n  }\r\n  return newOrder;\r\n}\r\n\r\nexport async function DeleteOrder(orderId: string): Promise<Order | null> {\r\n  try {\r\n    const value = await localStorage.getItem('token');\r\n    const res = await fetch(baseUrl + `/orders/${orderId}`, {\r\n      method: 'DELETE',\r\n      headers: new Headers({\r\n        'Content-Type': 'application/json',\r\n        'auth-token': value!,\r\n      }),\r\n    });\r\n    console.log(res);\r\n    var deleted = await res.json();\r\n  } catch (err) {\r\n    return null;\r\n  }\r\n  return deleted;\r\n}\r\n\r\nexport async function GetAllOrder(): Promise<Order[] | null> {\r\n  try {\r\n    const token = await localStorage.getItem('token');\r\n    if (token) {\r\n      const res = await fetch(baseUrl + '/orders', {\r\n        method: 'GET',\r\n        headers: new Headers({\r\n          'auth-token': token,\r\n        }),\r\n      });\r\n      return await res.json();\r\n    }\r\n    return null;\r\n  } catch (err) {\r\n    console.log(err);\r\n    return null;\r\n  }\r\n}\r\n","C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\reducers\\products.tsx",[],"C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\components\\Catalogue .tsx",[],"C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\components\\Alerts.tsx",[],"C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\components\\MyOrders.tsx",["90"],"import {\r\n  Button,\r\n  Card,\r\n  CardActionArea,\r\n  CardActions,\r\n  CardContent,\r\n  createStyles,\r\n  Grid,\r\n  makeStyles,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport { Pagination } from '@material-ui/lab';\r\nimport moment from 'moment';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { Order } from '../models/Order';\r\nimport { OrderItem } from '../models/OrderItem';\r\nimport { ordersActions } from '../reducers/orders';\r\nimport { updateActions } from '../reducers/update';\r\n\r\ninterface Props {\r\n  orders: Order[];\r\n  setOrder: (order: Order) => void;\r\n}\r\n\r\nfunction MyOrders(props: Props) {\r\n  const classes = useStyles();\r\n  const [ordersToShow, setOrdersToShow] = useState<Order[]>([]);\r\n\r\n  //reducer\r\n  const dispatch = useDispatch();\r\n  const update = useSelector((state: any) => state.update);\r\n\r\n  useEffect(() => {\r\n    setOrdersToShow(props.orders.slice(0, 6));\r\n  }, [props.orders]);\r\n\r\n  const handleChangePage = (\r\n    event: React.ChangeEvent<unknown>,\r\n    value: number\r\n  ) => {\r\n    setOrdersToShow(props.orders.slice((value - 1) * 6, value * 6));\r\n  };\r\n\r\n  const handleSumPrice2 = (orderItems: OrderItem[]) => {\r\n    let sum: number = 0;\r\n    if (orderItems && orderItems.length !== 0) {\r\n      orderItems.forEach((element) => {\r\n        sum = sum + element.quantity * element.product.price;\r\n      });\r\n      return sum;\r\n    } else return 0;\r\n  };\r\n\r\n  return (\r\n    <div className={classes.div}>\r\n      <Grid\r\n        container\r\n        style={{\r\n          flex: 1,\r\n          padding: 10,\r\n          justifyContent: 'space-around',\r\n        }}\r\n      >\r\n        {props.orders.length !== 0 ? (\r\n          ordersToShow.map((element: Order, index) => {\r\n            return (\r\n              <Grid item xs={5} key={index} className={classes.gridItem}>\r\n                <Card className={classes.root} variant=\"outlined\">\r\n                  <CardActionArea>\r\n                    <CardContent>\r\n                      <Typography\r\n                        gutterBottom\r\n                        variant=\"h5\"\r\n                        component=\"h2\"\r\n                        className={classes.title}\r\n                      >\r\n                        {element._id}\r\n                      </Typography>\r\n                      <Typography\r\n                        variant=\"body2\"\r\n                        color=\"textSecondary\"\r\n                        component=\"p\"\r\n                      >\r\n                        Datum kreiranja:{' '}\r\n                        {moment(element.date).format('DD-MM-YYYY')}\r\n                      </Typography>\r\n                      <Typography\r\n                        variant=\"body2\"\r\n                        color=\"textSecondary\"\r\n                        component=\"p\"\r\n                      >\r\n                        Napomena: {element.about}\r\n                      </Typography>\r\n                      <Typography\r\n                        variant=\"body2\"\r\n                        color=\"textSecondary\"\r\n                        component=\"p\"\r\n                      >\r\n                        Ukupna cena: {handleSumPrice2(element.orderItems)}\r\n                      </Typography>\r\n                    </CardContent>\r\n                  </CardActionArea>\r\n                  <CardActions>\r\n                    <Button\r\n                      size=\"small\"\r\n                      className={classes.button}\r\n                      onClick={() => {\r\n                        const o: Order = new Order(\r\n                          element._id,\r\n                          element.date,\r\n                          element.about,\r\n                          element.orderItems\r\n                        );\r\n                        props.setOrder(o);\r\n                        dispatch(updateActions.setUpdate() as any);\r\n                      }}\r\n                      component={Link}\r\n                      to={'/home/mojakorpa'}\r\n                    >\r\n                      Izmeni\r\n                    </Button>\r\n                    <Button\r\n                      size=\"small\"\r\n                      className={classes.button}\r\n                      onClick={() => {\r\n                        const o: Order = new Order(\r\n                          element._id,\r\n                          element.date,\r\n                          element.about,\r\n                          element.orderItems\r\n                        );\r\n                        dispatch(\r\n                          ordersActions.deleteOrdersAsyncAction(o) as any\r\n                        );\r\n                      }}\r\n                    >\r\n                      Obrisi\r\n                    </Button>\r\n                  </CardActions>\r\n                </Card>\r\n              </Grid>\r\n            );\r\n          })\r\n        ) : (\r\n          <label>Nema kreiranih porudzbina...</label>\r\n        )}\r\n        <Grid container className={classes.pagination}>\r\n          <Grid item style={{ margin: 'auto' }}>\r\n            <Pagination\r\n              count={Math.ceil(props.orders.length / 4)}\r\n              color=\"primary\"\r\n              onChange={handleChangePage}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    div: {\r\n      flex: 1,\r\n      overflow: 'hidden',\r\n      margin: 'auto',\r\n      justifyContent: 'space-around',\r\n      paddingTop: 10,\r\n      paddingLeft: 10,\r\n      paddingRight: 10,\r\n    },\r\n    gridItem: {\r\n      maxHeight: 250,\r\n    },\r\n    root: {\r\n      borderRadius: 10,\r\n      borderWidth: 2,\r\n      borderColor: '#005691',\r\n      marginTop: 5,\r\n    },\r\n    title: {\r\n      fontWeight: 'bold',\r\n      fontSize: 20,\r\n      color: '#005691',\r\n    },\r\n    subtitle: {\r\n      alignSelf: 'center',\r\n      fontSize: 15,\r\n      fontWeight: 'bold',\r\n    },\r\n    button: {\r\n      flex: 1,\r\n      flexDirection: 'row',\r\n      backgroundColor: '#005691',\r\n      alignContent: 'center',\r\n      justifyContent: 'center',\r\n      width: 200,\r\n      color: 'white',\r\n    },\r\n    pagination: {\r\n      // marginLeft: 'auto',\r\n      // marginRight: 'auto',\r\n      // marginTop: '15',\r\n      position: 'fixed',\r\n      bottom: '0%',\r\n      padding: 0,\r\n      height: '8vh !important',\r\n    },\r\n    //table\r\n    table: {\r\n      maxHeight: '400px',\r\n      minHeight: '200px',\r\n      // display: 'block',\r\n      overflowX: 'hidden',\r\n      overflowY: 'auto',\r\n      // height: '250px',\r\n      // minWidth: 400,\r\n      backgroundColor: '#E1E2EB',\r\n      boxShadow: '5px  5px  5px',\r\n      marginBottom: '2%',\r\n      backgroundColoe: 'red',\r\n    },\r\n    thead: {\r\n      display: 'table',\r\n      width: '100%',\r\n      tableLayout: 'fixed',\r\n      borderBottom: 'inset',\r\n      backgroundColor: '#222431',\r\n      color: 'white !important',\r\n    },\r\n    tbody: {\r\n      display: 'table',\r\n      overflow: 'auto',\r\n      tableLayout: 'fixed',\r\n      maxHeight: ' 250px',\r\n      width: ' 100%',\r\n    },\r\n    trow: {\r\n      width: '100%',\r\n    },\r\n  })\r\n);\r\n\r\nexport default MyOrders;\r\n","C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\components\\Navigation.tsx",[],"C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\models\\UserLogIn.tsx",[],"C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\models\\OrderItem.tsx",[],"C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\models\\IIndex.tsx",[],"C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\models\\Order.tsx",[],"C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\reducers\\orders.tsx",[],"C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\reducers\\update.tsx",[],"C:\\Users\\milic\\OneDrive\\Documents\\FAKS\\Master\\FPIS\\fpisMasterFront2\\src\\components\\MyCart.tsx",["91","92"],"import {\r\n  Button,\r\n  createStyles,\r\n  Grid,\r\n  makeStyles,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TextField,\r\n} from '@material-ui/core';\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Index } from '../models/IIndex';\r\nimport { Order } from '../models/Order';\r\nimport { OrderItem } from '../models/OrderItem';\r\nimport { ordersActions } from '../reducers/orders';\r\nimport { updateActions } from '../reducers/update';\r\nimport { UpdateOrder } from '../service/api';\r\nimport Alerts from './Alerts';\r\n\r\ninterface Props {\r\n  order: Order | null;\r\n  setOrder: (order: Order | null) => void;\r\n  setOrderItemQuantity: (id: string, nq: number) => void;\r\n  removeOrderItem: (orderItem: OrderItem) => void;\r\n}\r\nfunction MyCart(props: Props) {\r\n  const classes = useStyles();\r\n  const [newQuantity, setNewQuantity] = useState<number | null>(null);\r\n  const [about, setAbout] = useState<string>('');\r\n  const [indexes, setIndexes] = useState<Index[]>([]);\r\n  const [sumPrice, setSumPrice] = useState<number>(0);\r\n\r\n  const [openAlert, setOpenAlert] = useState<boolean>(false);\r\n  const [textAlert, setTextAlert] = useState<string | null>(null);\r\n  const [typeAlert, setTypeAlert] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    console.log('MyCart');\r\n    if (props.order) {\r\n      setAbout(props.order.about);\r\n    }\r\n    if (\r\n      props.order?.orderItems !== null &&\r\n      props.order?.orderItems.length !== 0\r\n    ) {\r\n      let indexes: any = props.order?.orderItems.map((item: OrderItem) => {\r\n        return new Index(item._id, false);\r\n      });\r\n      setIndexes(indexes);\r\n    }\r\n    handleSumPrice();\r\n  }, [props.order]);\r\n\r\n  const handleSumPrice = () => {\r\n    let sum: number = 0;\r\n    if (\r\n      props.order &&\r\n      props.order.orderItems &&\r\n      props.order.orderItems.length !== 0\r\n    ) {\r\n      props.order.orderItems.forEach((element) => {\r\n        sum = sum + element.quantity * element.product.price;\r\n      });\r\n      setSumPrice(sum);\r\n    } else setSumPrice(0);\r\n  };\r\n\r\n  const handleCancelOrder = () => {\r\n    setAbout('');\r\n    setSumPrice(0);\r\n    props.setOrder(null);\r\n    dispatch(updateActions.setCreate() as any);\r\n  };\r\n\r\n  const handleChangeQuantity = (itemID: string, nq: number) => {\r\n    if (\r\n      props.order &&\r\n      props.order.orderItems !== null &&\r\n      props.order.orderItems.length !== 0 &&\r\n      nq !== 0\r\n    ) {\r\n      props.setOrderItemQuantity(itemID, nq);\r\n      handleSumPrice();\r\n    }\r\n  };\r\n\r\n  const handleModifyQuantity = (nq: number) => {\r\n    setNewQuantity(nq);\r\n  };\r\n\r\n  const handleModifyIndexes = (id: string) => {\r\n    let indexes2: Index[] = [...indexes];\r\n    let i = indexes2.findIndex((x) => x.id === id);\r\n    indexes2[i].editable = true;\r\n    setIndexes(indexes2);\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n  const orders = useSelector((state: any) => state.order);\r\n  const update = useSelector((state: any) => state.update);\r\n\r\n  const handleAddOrder = async () => {\r\n    if (props.order?.orderItems && props.order.orderItems.length !== 0) {\r\n      let ok: boolean;\r\n\r\n      dispatch(\r\n        (ok = ordersActions.addOrderAsyncAction(\r\n          new Order(\r\n            props.order._id,\r\n            props.order.date,\r\n            about,\r\n            props.order.orderItems\r\n          )\r\n        ) as any)\r\n      );\r\n\r\n      if (ok) {\r\n        setTextAlert('Uspesno kreirana porudzbina');\r\n        setTypeAlert('success');\r\n        setOpenAlert(true);\r\n        setTimeout(() => {\r\n          handleCancelOrder();\r\n        }, 1000);\r\n      } else {\r\n        setTextAlert('Greska prilikom kreiranja porudzbine');\r\n        setTypeAlert('error');\r\n        setOpenAlert(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleUpdateOrder = async () => {\r\n    console.log('update order');\r\n    if (\r\n      props.order &&\r\n      props.order.orderItems &&\r\n      props.order.orderItems.length !== 0\r\n    ) {\r\n      let res = await UpdateOrder(\r\n        new Order(\r\n          props.order._id,\r\n          props.order.date,\r\n          about,\r\n          props.order.orderItems\r\n        )\r\n      );\r\n      if (res) {\r\n        setTextAlert('Uspesno izmenjena porudzbina');\r\n        setTypeAlert('success');\r\n        setOpenAlert(true);\r\n        setTimeout(() => {\r\n          handleCancelOrder();\r\n        }, 1000);\r\n        dispatch(ordersActions.getOrdersAsyncAction() as any);\r\n      } else {\r\n        setTextAlert('Greska prilikom izmene porudzbine');\r\n        setTypeAlert('error');\r\n        setOpenAlert(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        flex: 1,\r\n        overflow: 'hidden',\r\n        margin: 'auto',\r\n        justifyContent: 'space-around',\r\n        paddingTop: 100,\r\n        paddingLeft: 10,\r\n        paddingRight: 10,\r\n      }}\r\n    >\r\n      <Grid\r\n        item\r\n        xs={12}\r\n        style={{\r\n          textAlign: 'center',\r\n          marginBottom: 10,\r\n        }}\r\n      >\r\n        <label>Ukupan iznos: </label>\r\n        <TextField id=\"standard-sum-price\" disabled value={sumPrice} />\r\n      </Grid>\r\n      <Grid item>\r\n        <TableContainer className={classes.table}>\r\n          <Table size=\"medium\">\r\n            <TableHead className={classes.thead}>\r\n              <TableRow>\r\n                <TableCell style={{ color: 'white' }}>Indeks</TableCell>\r\n                <TableCell style={{ color: 'white' }}>\r\n                  Naziv proizvoda\r\n                </TableCell>\r\n                <TableCell style={{ color: 'white' }}>Jedinicna cena</TableCell>\r\n                <TableCell style={{ color: 'white' }}>Kolicina</TableCell>\r\n                <TableCell style={{ color: 'white' }}>\r\n                  Izmeni/Obrisi stavku\r\n                </TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody className={classes.tbody}>\r\n              {props.order?.orderItems.map((row: OrderItem, index) => {\r\n                return (\r\n                  <TableRow\r\n                    key={index}\r\n                    className={classes.trow}\r\n                    style={{ color: 'white' }}\r\n                  >\r\n                    <TableCell>{row._id}</TableCell>\r\n                    <TableCell>{row.product.name}</TableCell>\r\n                    <TableCell>{row.product.price}</TableCell>\r\n                    <TableCell>\r\n                      <TextField\r\n                        id=\"standard-number\"\r\n                        value={\r\n                          !indexes.find((x) => x.id === row._id)?.editable\r\n                            ? row.quantity\r\n                            : newQuantity\r\n                        }\r\n                        onChange={(e) => {\r\n                          handleModifyQuantity(Number(e.target.value));\r\n                        }}\r\n                        type=\"number\"\r\n                        InputProps={{\r\n                          readOnly: !indexes.find((x) => x.id === row._id)\r\n                            ?.editable,\r\n                        }}\r\n                        InputLabelProps={{\r\n                          shrink: true,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {indexes.find((x) => x.id === row._id)?.editable ===\r\n                      false ? (\r\n                        <Grid>\r\n                          <Button\r\n                            startIcon={<CreateIcon />}\r\n                            onClick={() => {\r\n                              setNewQuantity(row.quantity);\r\n                              handleModifyIndexes(row._id);\r\n                            }}\r\n                          />\r\n                          <Button\r\n                            startIcon={<DeleteIcon />}\r\n                            onClick={() => {\r\n                              props.removeOrderItem(row);\r\n                              handleSumPrice();\r\n                              setNewQuantity(null);\r\n                            }}\r\n                          />\r\n                        </Grid>\r\n                      ) : (\r\n                        <Grid>\r\n                          <Button\r\n                            startIcon={<CloseIcon />}\r\n                            onClick={() => {\r\n                              handleChangeQuantity(row._id, row.quantity!);\r\n                            }}\r\n                          />\r\n                          <Button\r\n                            startIcon={<CheckIcon />}\r\n                            onClick={() =>\r\n                              handleChangeQuantity(row._id, newQuantity!)\r\n                            }\r\n                          />\r\n                        </Grid>\r\n                      )}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Grid>\r\n      <Grid container>\r\n        <Grid item xs={4} style={{ textAlign: 'left' }}>\r\n          <Button className={classes.btnReject} onClick={handleCancelOrder}>\r\n            Odustani\r\n          </Button>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          xs={4}\r\n          style={{\r\n            textAlign: 'center',\r\n          }}\r\n        >\r\n          <TextField\r\n            id=\"outlined-multiline-static\"\r\n            label=\"Napomena\"\r\n            multiline\r\n            rows={3}\r\n            variant=\"outlined\"\r\n            style={{ width: '100%' }}\r\n            value={about}\r\n            onChange={(e) => setAbout(e.target.value)}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={4} style={{ textAlign: 'right' }}>\r\n          <Button\r\n            className={classes.btnConfirm}\r\n            onClick={() => {\r\n              update ? handleUpdateOrder() : handleAddOrder();\r\n            }}\r\n          >\r\n            Potvrdi\r\n          </Button>\r\n          {openAlert ? (\r\n            <Alerts\r\n              text={textAlert}\r\n              type={typeAlert}\r\n              setText={() => setOpenAlert(false)}\r\n              setType={() => setOpenAlert(false)}\r\n            />\r\n          ) : null}\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    table: {\r\n      maxHeight: '400px',\r\n      minHeight: '200px',\r\n      overflowX: 'hidden',\r\n      overflowY: 'auto',\r\n      backgroundColor: '#E1E2EB',\r\n      boxShadow: '5px  5px  5px',\r\n      marginBottom: '2%',\r\n      backgroundColoe: 'red',\r\n    },\r\n    thead: {\r\n      display: 'table',\r\n      width: '100%',\r\n      tableLayout: 'fixed',\r\n      borderBottom: 'inset',\r\n      backgroundColor: '#222431',\r\n      color: 'white !important',\r\n    },\r\n    tbody: {\r\n      display: 'table',\r\n      overflow: 'auto',\r\n      tableLayout: 'fixed',\r\n      maxHeight: ' 250px',\r\n      width: ' 100%',\r\n    },\r\n    trow: {\r\n      width: '100%',\r\n    },\r\n    btnConfirm: {\r\n      color: '#e1e2eb',\r\n      background: '#222431',\r\n      backgroundImage: `url(\r\n        ${'https://www.transparenttextures.com/patterns/asfalt-dark.png'}\r\n      )`,\r\n      width: '200px',\r\n    },\r\n    btnReject: {\r\n      background: '#e1e2eb',\r\n      color: '#222431',\r\n      border: '1px',\r\n      borderStyle: 'solid',\r\n      width: '200px',\r\n    },\r\n  })\r\n);\r\nexport default MyCart;\r\n",{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":29,"column":6,"nodeType":"99","endLine":29,"endColumn":8,"suggestions":"100"},{"ruleId":"101","severity":1,"message":"102","line":26,"column":7,"nodeType":"103","messageId":"104","endLine":26,"endColumn":35},{"ruleId":"101","severity":1,"message":"105","line":33,"column":9,"nodeType":"103","messageId":"104","endLine":33,"endColumn":15},{"ruleId":"97","severity":1,"message":"106","line":60,"column":6,"nodeType":"99","endLine":60,"endColumn":19,"suggestions":"107"},{"ruleId":"101","severity":1,"message":"108","line":107,"column":9,"nodeType":"103","messageId":"104","endLine":107,"endColumn":15},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["111"],"@typescript-eslint/no-unused-vars","'OrderItemDefault' is assigned a value but never used.","Identifier","unusedVar","'update' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleSumPrice'. Either include it or remove the dependency array.",["112"],"'orders' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},"Update the dependencies array to be: [dispatch]",{"range":"117","text":"118"},"Update the dependencies array to be: [handleSumPrice, props.order]",{"range":"119","text":"120"},[1080,1082],"[dispatch]",[1950,1963],"[handleSumPrice, props.order]"]